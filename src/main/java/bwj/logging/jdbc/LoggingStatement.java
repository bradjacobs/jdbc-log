package bwj.logging.jdbc;

import java.io.Reader;
import java.sql.Clob;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.SQLWarning;
import java.sql.Statement;
import java.text.NumberFormat;
import java.util.LinkedList;
import java.util.List;
import java.util.logging.Logger;
//import org.apache.log4j.Logger;

public class LoggingStatement implements Statement
{
//    public static final Renderer defaultRenderer = new TagUpdater.DefaultRenderer() {
//        public void render(Object object, StringBuilder sb) {
//            if (object instanceof Class) {
//                sb.append('\'').append(((Class)object).getName()).append('\'');
//            } else if (object instanceof String || object instanceof java.util.Date) {
//                sb.append('\'').append(object).append('\'');
//            } else if (object instanceof Boolean) {
//                sb.append((Boolean) object ? 1 : 0);
//            } else {
//                super.render(object, sb);
//            }
//        }
//    };

    private List<BatchItem> batchItems = new LinkedList<BatchItem>();

    protected void appendBatchItem(BatchItem batchItem) {
        this.batchItems.add(batchItem);
    }
    private void logAndClearBatch() {

        System.out.println("******* LKGGING BATCH *******");

        log(this.batchItems.toString());
        this.batchItems = new LinkedList<BatchItem>();
    }


    private void setAndLogCurrent(String sql) {
        this.current.setSQL(sql);
        logCurrent();
    }

    protected void logCurrent() {
        log(this.current.toString());
    }

    protected void clearTopParameters() {
        this.current.clearParameters();
    }

    protected void setCurrentParameter(int index, Object value) {
        this.current.setParameter(index, value);
    }

    /**
     * Extracing a value from a Reader for logging modifies (i.e. emptys) the Reader.
     * Thus this method returns a 'new reader' that is to be used in place of the original.
     * @param index index
     * @param value reader
     * @return refreshed reader
     */
    protected Reader setReaderParameter(int index, Reader value) {
        return this.current.setReaderParameter(index, value);
    }


    protected static final NumberFormat numberFormat = NumberFormat.getNumberInstance();


    // TODO
    //private static final Logger logger = Logger.getLogger(LoggingStatement.class);
    private static final Logger logger = null;

    private Statement statement;
    protected BatchItem current;
    private final LoggingListener loggingListener;

    public LoggingStatement(Statement statement, LoggingListener loggingListener) {
        this.statement = statement;
        this.loggingListener = loggingListener;
//        this.current = new BatchItem(defaultRenderer);
        this.current = new BatchItem();
    }

    public LoggingStatement(Statement statement, String sql, LoggingListener loggingListener) {
        this.statement = statement;


        this.loggingListener = loggingListener;
//        this.current = new BatchItem(defaultRenderer);
        this.current = new BatchItem();
        this.current.setSQL(sql);
    }

    public LoggingStatement(Statement statement, String sql, LoggingListener loggingListener, Renderer renderer) {
        this.statement = statement;
        this.loggingListener = loggingListener;
        this.current = new BatchItem();
        this.current.setSQL(sql);
    }

    private void log(String sql) {

        System.out.println("****  " + sql);
        if (this.loggingListener != null)
            this.loggingListener.log(sql);
//        if (logger.isDebugEnabled())
//            logger.debug(sql);
    }


    @Override
    public void addBatch(String sql) throws SQLException
    {
        appendBatchItem(new BatchItem(this.current, sql));
        statement.addBatch(sql);
    }


    @Override
    public void cancel() throws SQLException
    {
        statement.cancel();
    }

    @Override
    public void clearWarnings() throws SQLException
    {
        statement.clearWarnings();
    }

    @Override
    public void close() throws SQLException
    {
        statement.close();
    }

    @Override
    public void closeOnCompletion() throws SQLException
    {
        statement.closeOnCompletion();
    }


    @Override
    public void clearBatch() throws SQLException
    {
        this.batchItems.clear();
        statement.clearBatch();
    }

    @Override
    public boolean execute(String sql) throws SQLException
    {
        setAndLogCurrent(sql);
        return statement.execute(sql);
    }

    @Override
    public boolean execute(String sql, int autoGeneratedKeys) throws SQLException
    {
        setAndLogCurrent(sql);
        return statement.execute(sql, autoGeneratedKeys);
    }

    @Override
    public boolean execute(String sql, int[] columnIndexes) throws SQLException
    {
        setAndLogCurrent(sql);
        return statement.execute(sql, columnIndexes);
    }

    @Override
    public boolean execute(String sql, String[] columnNames) throws SQLException
    {
        setAndLogCurrent(sql);
        return statement.execute(sql, columnNames);
    }

    @Override
    public int[] executeBatch() throws SQLException
    {
        logAndClearBatch();
        return statement.executeBatch();
    }

    @Override
    public ResultSet executeQuery(String sql) throws SQLException
    {
        return statement.executeQuery(sql);
    }

    @Override
    public int executeUpdate(String sql) throws SQLException
    {
        setAndLogCurrent(sql);
        return statement.executeUpdate(sql);
    }

    @Override
    public int executeUpdate(String sql, int autoGeneratedKeys) throws SQLException
    {
        setAndLogCurrent(sql);
        return statement.executeUpdate(sql, autoGeneratedKeys);
    }

    @Override
    public int executeUpdate(String sql, int[] columnIndexes) throws SQLException
    {
        setAndLogCurrent(sql);
        return statement.executeUpdate(sql, columnIndexes);
    }

    @Override
    public int executeUpdate(String sql, String[] columnNames) throws SQLException
    {
        setAndLogCurrent(sql);
        return statement.executeUpdate(sql, columnNames);
    }

    @Override
    public long[] executeLargeBatch() throws SQLException
    {
        return statement.executeLargeBatch();
    }

    @Override
    public long executeLargeUpdate(String sql) throws SQLException
    {
        setAndLogCurrent(sql);
        return statement.executeLargeUpdate(sql);
    }

    @Override
    public long executeLargeUpdate(String sql, int autoGeneratedKeys) throws SQLException
    {
        setAndLogCurrent(sql);
        return statement.executeLargeUpdate(sql, autoGeneratedKeys);
    }

    @Override
    public long executeLargeUpdate(String sql, int[] columnIndexes) throws SQLException
    {
        setAndLogCurrent(sql);
        return statement.executeLargeUpdate(sql, columnIndexes);
    }

    @Override
    public long executeLargeUpdate(String sql, String[] columnNames) throws SQLException
    {
        setAndLogCurrent(sql);
        return statement.executeLargeUpdate(sql, columnNames);
    }

    @Override
    public Connection getConnection() throws SQLException
    {
        return statement.getConnection();
    }

    @Override
    public ResultSet getGeneratedKeys() throws SQLException
    {
        return statement.getGeneratedKeys();
    }

    @Override
    public int getFetchDirection() throws SQLException
    {
        return statement.getFetchDirection();
    }

    @Override
    public int getFetchSize() throws SQLException
    {
        return statement.getFetchSize();
    }

    @Override
    public long getLargeUpdateCount() throws SQLException
    {
        return statement.getLargeUpdateCount();
    }

    @Override
    public int getMaxFieldSize() throws SQLException
    {
        return statement.getMaxFieldSize();
    }

    @Override
    public void setMaxFieldSize(int max) throws SQLException
    {
        statement.setMaxFieldSize(max);
    }

    @Override
    public int getMaxRows() throws SQLException
    {
        return statement.getMaxRows();
    }

    @Override
    public boolean getMoreResults() throws SQLException
    {
        return statement.getMoreResults();
    }

    @Override
    public boolean getMoreResults(int current) throws SQLException
    {
        return statement.getMoreResults(current);
    }

    @Override
    public int getQueryTimeout() throws SQLException
    {
        return statement.getQueryTimeout();
    }


    @Override
    public ResultSet getResultSet() throws SQLException
    {
        return statement.getResultSet();
    }

    @Override
    public int getResultSetHoldability() throws SQLException
    {
        return statement.getResultSetHoldability();
    }

    @Override
    public int getResultSetConcurrency() throws SQLException
    {
        return statement.getResultSetConcurrency();
    }

    @Override
    public int getResultSetType() throws SQLException
    {
        return statement.getResultSetType();
    }

    @Override
    public int getUpdateCount() throws SQLException
    {
        return statement.getUpdateCount();
    }

    @Override
    public SQLWarning getWarnings() throws SQLException
    {
        return statement.getWarnings();
    }

    @Override
    public boolean isClosed() throws SQLException
    {
        return statement.isClosed();
    }

    @Override
    public boolean isCloseOnCompletion() throws SQLException
    {
        return statement.isCloseOnCompletion();
    }

    @Override
    public boolean isPoolable() throws SQLException
    {
        return statement.isPoolable();
    }

    @Override
    public void setCursorName(String name) throws SQLException
    {
        statement.setCursorName(name);
    }

    @Override
    public void setEscapeProcessing(boolean enable) throws SQLException
    {
        statement.setEscapeProcessing(enable);
    }

    @Override
    public void setFetchDirection(int direction) throws SQLException
    {
        statement.setFetchDirection(direction);
    }

    @Override
    public void setFetchSize(int rows) throws SQLException
    {
        statement.setFetchSize(rows);
    }

    @Override
    public long getLargeMaxRows() throws SQLException
    {
        return statement.getLargeMaxRows();
    }

    @Override
    public void setLargeMaxRows(long max) throws SQLException
    {
        statement.setLargeMaxRows(max);
    }

    @Override
    public void setMaxRows(int max) throws SQLException
    {
        statement.setMaxRows(max);
    }

    @Override
    public void setPoolable(boolean poolable) throws SQLException
    {
        statement.setPoolable(poolable);
    }

    @Override
    public void setQueryTimeout(int seconds) throws SQLException
    {
        statement.setQueryTimeout(seconds);
    }

    @Override
    public <T> T unwrap(Class<T> iface) throws SQLException
    {
        return statement.unwrap(iface);
    }

    @Override
    public boolean isWrapperFor(Class<?> iface) throws SQLException
    {
        return statement.isWrapperFor(iface);
    }
}
